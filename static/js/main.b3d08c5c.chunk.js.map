{"version":3,"sources":["components/CardPositif.js","components/CardSembuh.js","components/CardKematian.js","App.js","serviceWorker.js","index.js"],"names":["CardPositif","props","className","positif","positifToday","CardSembuh","sembuh","CardKematian","kematian","todayKematian","App","onChangeHandler","event","setState","nama_Provi","target","value","state","meninggal","positifIndo","positfToday","sembIndo","sembToday","meniIndo","meniToday","arrHari","hari","Date","getDay","arrBulan","bulan","getMonth","tanggal","getDate","tahun","getFullYear","Axios","get","then","response","data","cases","deaths","recovered","catch","err","console","log","todayCases","todayDeaths","error","this","getGlobal","getIndonesia","style","marginTop","getHours","getMinutes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b3d08c5c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CardPositif =(props)=>(\r\n    <div className=\"col-md-4\">\r\n        <div className=\"card text-center mb-2 card-kasus\">\r\n            <div className=\"card-header text-white bg-warning\">\r\n            <h5>Positif</h5>\r\n            </div>\r\n            <div className=\"card-body\">\r\n            <h5>{props.positif}</h5>\r\n            {props.positifToday==null?(\r\n                <div></div>\r\n            ):(\r\n\r\n            <p>Hari ini : {props.positifToday}</p>\r\n            )}\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default CardPositif;","import React from 'react';\r\n\r\nconst CardSembuh =(props)=>(\r\n    <div className=\"col-md-4\">\r\n        <div className=\"card text-center mb-2 card-kasus\">\r\n            <div className=\"card-header text-white bg-success \">\r\n            <h5>Sembuh</h5>\r\n            </div>\r\n            <div className=\"card-body\">\r\n            <h5>{props.sembuh}</h5>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default CardSembuh;","import React from 'react';\r\n\r\nconst CardKematian =(props)=>(\r\n    <div className=\"col-md-4 mb-2\">\r\n        <div className=\"card text-center card-kasus\">\r\n            <div className=\"card-header text-white bg-danger\">\r\n            <h5>Meninggal</h5>\r\n            </div>\r\n            <div className=\"card-body\">\r\n            <h5>{props.kematian}</h5>\r\n            {props.todayKematian==null?(\r\n                <div>\r\n                </div>\r\n            ):(\r\n                <p>Hari ini : {props.todayKematian}</p>\r\n            )}\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default CardKematian;","import React from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport CardPositif from './components/CardPositif';\nimport CardSembuh from './components/CardSembuh';\nimport CardKematian from './components/CardKematian';\n\nclass App extends React.Component  {\n  constructor(props){\n    super(props);\n    this.state = {\n      positif:\"\",\n      sembuh:\"\",\n      meninggal:\"\",\n      positifIndo:\"\",\n      positfToday:\"\",\n      sembIndo:\"\",\n      sembToday:\"\",\n      meniIndo:\"\",\n      meniToday:\"\",\n      arrHari:[\"Ahad\",\"Senin\",\"Selasa\",\"Rabu\",\"Kamis\",\"Jum'at\",\"Sabtu\"],\n      hari:new Date().getDay(),\n      arrBulan:[\"Januari\",\"Februari\",\"Maret\",\"April\",\"Mei\",\"Juni\",\"Juli\",\"Agustus\",\"September\",\"Oktober\",\"November\",\"Desember\"],\n      bulan:new Date().getMonth(),\n      tanggal:new Date().getDate(),\n      tahun:new Date().getFullYear()\n\n    }\n  }\n  onChangeHandler=(event)=>(\n    this.setState({\n      nama_Provi:event.target.value\n    })\n  )\n\n  getGlobal(){\n    Axios.get('http://coronavirus-19-api.herokuapp.com/all')\n    .then(response=>{\n      this.setState({\n        positif:response.data.cases,\n        sembuh:response.data.deaths,\n        meninggal:response.data.recovered\n      })\n    })\n    .catch(err=>console.log(err))\n  }\n\n  getIndonesia(){\n    Axios.get('http://coronavirus-19-api.herokuapp.com/countries/indonesia')\n    .then(response=>{\n      console.log(response.data)\n      this.setState({\n        positifIndo:response.data.cases,\n        positfToday:response.data.todayCases,\n        sembIndo:response.data.recovered,\n        meniIndo:response.data.deaths,\n        meniToday:response.data.todayDeaths\n      })\n    })\n    .catch(error => console.log(error))\n  }\n\n  componentDidMount(){\n    this.getGlobal();\n    this.getIndonesia();\n  }\n\n  render(){\n    return (\n      <>\n        <div className=\"container\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-md-10\">\n              <div className=\"card mt-3 mb-3\">\n                <div className=\"card-body\">\n\n                  <div className=\"card p-2 mt-5 mb-5\">\n                    <h4 className=\"text-center\">Covid-19 Real Times Global</h4>\n                  </div>\n                  <div className=\"row mt-3\">\n                      <CardPositif positif={this.state.positif}/>\n                      <CardSembuh sembuh={this.state.sembuh}/>\n                      <CardKematian kematian={this.state.meninggal}/>\n                      </div>\n\n                  <div className=\"card p-2 mt-5 mb-5\">\n                    <h4 className=\"text-center\">Covid-19 Real Times Indonesia</h4>\n                  </div>\n\n                    <div className=\"row mt-3\">\n                      <CardPositif positif={this.state.positifIndo} positifToday={this.state.positfToday}/>\n                      <CardSembuh sembuh={this.state.sembIndo} />\n                      <CardKematian kematian={this.state.meniIndo} todayKematian={this.state.meniToday}/>\n                    </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-md-12\">\n                      <p className=\"text-center\" style={{marginTop:'300px'}}>{new Date().getHours()}:{new Date().getMinutes()} <br></br>{this.state.arrHari[this.state.hari]}, {this.state.tanggal} {this.state.arrBulan[this.state.bulan]} {this.state.tahun}\n                      <br></br> #DirumahAja. By <span className=\"text-danger\">&#10084;</span> Muhammad Dzulfikri <br></br>Data from API @herokuapp</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}